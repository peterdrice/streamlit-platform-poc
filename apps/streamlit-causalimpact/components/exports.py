import causalimpact
import streamlit as st
import pandas as pd

import json
import textwrap
import datetime

def create_markdown_report(
    test_title, value_col, pre_test_start, pre_test_end, 
    test_start, test_end, post_test_end, test_geos, control_geos, 
    impact_summary, detailed_report,
):
    return textwrap.dedent(f"""
# {test_title} - Causal Impact Analysis Results
    
## Test Overview
- **Test Name:** {test_title}
- **Analysis Date:** {datetime.date.today()}

## Test Periods
- **Pre-Test Period:** {pre_test_start} to {pre_test_end}
- **Test Period:** {test_start} to {test_end}
- **Post-Test Period:** {test_start} to {post_test_end}

## Key Results
- **Incremental {value_col}:** {impact_summary.abs_effect["cumulative"]:,.0f} ({impact_summary.rel_effect["cumulative"]:.2%})
- **Test Cell Total:** {impact_summary.actual["cumulative"]:,.0f}
- **Control Cell Total:** {impact_summary.predicted["cumulative"]:,.0f}
- **Confidence:** {1-impact_summary.p_value["cumulative"]:.0%}

## Test Configuration
- **Test Geos:** {', '.join('`{0}`'.format(w) for w in test_geos)}
- **Control Geos:** {', '.join('`{0}`'.format(w) for w in control_geos)}
- **Value Column:** `{value_col}`

## Detailed Analysis Report

## Report
{detailed_report}

---
*Generated by Causal Impact Analysis Tool*
"""
).strip()

def create_json_report(
    test_title, value_col, pre_test_start, pre_test_end, 
    test_start, test_end, post_test_end, impact_summary,
):
    # Create results data structure
    results_data = {
        "test_name": test_title,
        "kpi": value_col,
        "pre_test_period": {
            "start": str(pre_test_start),
            "end": str(pre_test_end)
        },
        "test_period": {
            "start": str(test_start),
            "end": str(test_end)
        },
        "post_test_period": {
            "start": str(test_start),
            "end": str(post_test_end)
        },
        "incremental_results": {
            "absolute_effect": f"{impact_summary.abs_effect["cumulative"]:,.0f}",
            "relative_effect": f"{impact_summary.rel_effect["cumulative"]:,.2%}",
            "test_cell_total": f"{impact_summary.actual["cumulative"]:,.2f}",
            "control_cell_total": f"{impact_summary.predicted["cumulative"]:,.2f}"
        },
        "confidence": f"{(1 - impact_summary.p_value["cumulative"]):,.2%}",
        "analysis_date": str(datetime.date.today())
    }

    # Create JSON string
    return json.dumps(results_data, indent=2)
name: Build and Deploy Streamlit Platform

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Push, and Register Task Definitions for each app
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ github.sha }}
          EXECUTION_ROLE_ARN=$(aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.Arn' --output text)

          for app_path in apps/*; do
            if [ -d "$app_path" ]; then
              APP_ID=$(basename "$app_path")
              ECR_REPOSITORY=$APP_ID
              IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
              TASK_FAMILY="${APP_ID}-task"

              echo "--- Processing app: $APP_ID ---"

              aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ env.AWS_REGION }} || true

              docker build -t $IMAGE_URI --build-arg APP_DIR="$app_path" .
              docker push $IMAGE_URI

              cat <<EOF > task-definition.json
{
    "family": "$TASK_FAMILY",
    "networkMode": "awsvpc",
    "executionRoleArn": "$EXECUTION_ROLE_ARN",
    "containerDefinitions": [
        {
            "name": "$APP_ID",
            "image": "$IMAGE_URI",
            "portMappings": [{"containerPort": 8501, "protocol": "tcp"}],
            "essential": true
        }
    ],
    "requiresCompatibilities": ["FARGATE"],
    "cpu": "256",
    "memory": "512"
}
EOF
              aws ecs register-task-definition --cli-input-json file://task-definition.json
              echo "--- Finished processing $APP_ID ---"
            fi
          done

      - name: Generate apps.json file
        run: |
          pip install pyyaml
          python scripts/generate_apps_json.py

      - name: Deploy frontend to S3
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} --exclude "*" --include "index.html" --include "script.js" --include "apps.json" --delete

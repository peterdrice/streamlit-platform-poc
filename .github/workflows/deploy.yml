name: Build and Deploy Streamlit Platform
on:
  push:
    branches:
      - main
permissions:
  id-token: write
  contents: read
env:
  AWS_REGION: us-east-1
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: apps/**

      - name: Install PyYAML for parsing
        run: pip install pyyaml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.changed-files.outputs.any_changed == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx for advanced caching
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install SOCI CLI
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Use a direct, versioned link for reliability
          sudo curl -L -o /usr/local/bin/soci https://github.com/awslabs/soci-snapshotter/releases/download/v0.4.0/soci-linux-amd64
          sudo chmod +x /usr/local/bin/soci

      - name: Build and Push only changed apps
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ github.sha }}
          EXECUTION_ROLE_ARN=$(aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.Arn' --output text)
          TASK_ROLE_ARN=$EXECUTION_ROLE_ARN

          declare -A processed_dirs

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            app_path=$(dirname "$file")
            while [[ "$app_path" != "apps" && "$app_path" != "." ]]; do
                parent_dir=$(dirname "$app_path")
                if [[ "$parent_dir" == "apps" ]]; then
                    break
                fi
                app_path=$parent_dir
            done

            if [[ -z "${processed_dirs[$app_path]}" && "$app_path" != "apps" ]]; then
              processed_dirs[$app_path]=1
              APP_ID=$(basename "$app_path")
              ECR_REPOSITORY=$APP_ID
              IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
              TASK_FAMILY="${APP_ID}-task"

              MANIFEST_PATH="$app_path/manifest.yaml"
              ENTRYPOINT_SCRIPT=$(python -c "import yaml; f=open('$MANIFEST_PATH'); d=yaml.safe_load(f); print(d.get('entryPoint', 'app.py'))")
              REQUIREMENTS_FILE=$(python -c "import yaml; f=open('$MANIFEST_PATH'); d=yaml.safe_load(f); print(d.get('requirements', 'requirements.txt'))")
              CPU_VALUE=$(python -c "import yaml; f=open('$MANIFEST_PATH'); d=yaml.safe_load(f); print(d.get('cpu', '256'))")
              MEMORY_VALUE=$(python -c "import yaml; f=open('$MANIFEST_PATH'); d=yaml.safe_load(f); print(d.get('memory', '512'))")

              echo "--- Change detected in $app_path. Processing app: $APP_ID ---"

              aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ env.AWS_REGION }} || true
              docker buildx build --platform linux/amd64 -t $IMAGE_URI \
                --cache-from=type=local,src=/tmp/.buildx-cache \
                --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
                --build-arg APP_DIR="$app_path" \
                --build-arg ENTRYPOINT_SCRIPT="$ENTRYPOINT_SCRIPT" \
                --build-arg REQUIREMENTS_FILE="$REQUIREMENTS_FILE" \
                --push .

              echo "--- Generating and pushing SOCI index for $IMAGE_URI ---"
              soci create $IMAGE_URI
              soci push $IMAGE_URI

              # Create a temporary template file for substitution
              cp task-definition-template.json temp-task-def.json
              # Use sed for robust replacement
              sed -i "s/\${TASK_FAMILY}/$TASK_FAMILY/g" temp-task-def.json
              sed -i "s/\${EXECUTION_ROLE_ARN}/$EXECUTION_ROLE_ARN/g" temp-task-def.json
              sed -i "s/\${TASK_ROLE_ARN}/$TASK_ROLE_ARN/g" temp-task-def.json
              sed -i "s/\${APP_ID}/$APP_ID/g" temp-task-def.json
              sed -i "s@\${IMAGE_URI}@$IMAGE_URI@g" temp-task-def.json
              sed -i "s/\${CPU}/$CPU_VALUE/g" temp-task-def.json
              sed -i "s/\${MEMORY}/$MEMORY_VALUE/g" temp-task-def.json

              aws ecs register-task-definition --cli-input-json file://temp-task-def.json
            fi
          done
          # Move new cache to old cache position
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Generate and Deploy Frontend
        run: |
          python scripts/generate_apps_json.py
          aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} --exclude "*" --include "index.html" --include "script.js" --include "apps.json" --delete

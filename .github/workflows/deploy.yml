name: Build and Deploy Streamlit Platform
on:
  push:
    branches:
      - main
permissions:
  id-token: write
  contents: read
env:
  AWS_REGION: us-east-1
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PyYAML for parsing
        run: pip install pyyaml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Push, and Register Task Definitions for each app
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ github.sha }}
          export EXECUTION_ROLE_ARN=$(aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.Arn' --output text)
          export TASK_ROLE_ARN=$EXECUTION_ROLE_ARN

          for app_path in apps/*; do
            if [ -d "$app_path" ]; then
              export APP_ID=$(basename "$app_path")
              export ECR_REPOSITORY=$APP_ID
              export IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
              export TASK_FAMILY="${APP_ID}-task"

              MANIFEST_PATH="$app_path/manifest.yaml"
              # Use Python for robust YAML parsing
              export ENTRYPOINT_SCRIPT=$(python -c "import yaml; f=open('$MANIFEST_PATH'); d=yaml.safe_load(f); print(d.get('entryPoint', 'app.py'))")
              export REQUIREMENTS_FILE=$(python -c "import yaml; f=open('$MANIFEST_PATH'); d=yaml.safe_load(f); print(d.get('requirements', 'requirements.txt'))")

              echo "--- Processing app: $APP_ID with entrypoint: $ENTRYPOINT_SCRIPT and requirements: $REQUIREMENTS_FILE ---"

              aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ env.AWS_REGION }} || true
              docker build -t $IMAGE_URI \
                --build-arg APP_DIR="$app_path" \
                --build-arg ENTRYPOINT_SCRIPT="$ENTRYPOINT_SCRIPT" \
                --build-arg REQUIREMENTS_FILE="$REQUIREMENTS_FILE" .
              docker push $IMAGE_URI

              envsubst < task-definition-template.json > task-definition.json

              aws ecs register-task-definition --cli-input-json file://task-definition.json
            fi
          done
      - name: Generate and Deploy Frontend
        run: |
          python scripts/generate_apps_json.py
          aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} --exclude "*" --include "index.html" --include "script.js" --include "apps.json" --delete
